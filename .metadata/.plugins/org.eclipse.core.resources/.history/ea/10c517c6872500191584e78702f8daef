// ----------------------------------------------------------------------------
// BSD 3-Clause License

// Copyright (c) 2016, qbrobotics
// Copyright (c) 2017-2018, Centro "E.Piaggio"
// All rights reserved.

// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:

// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.

// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.

// * Neither the name of the copyright holder nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// POSSIBILITY OF SUCH DAMAGE.
// ----------------------------------------------------------------------------

/**
* \file         utils.h
*
* \brief        Definition of utility functions.
* \date         February 01, 2018
* \author       _Centro "E.Piaggio"_
* \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
* \copyright    (C) 2017-2018 Centro "E.Piaggio". All rights reserved.
*/

#include "utils.h"

//--------------------------------------------------------------     DEFINITIONS

//==============================================================================
//                                                                       INVSQRT
//==============================================================================
float invSqrt(float x) {
	float halfx = 0.5f * x;
	float y = x;
	long i = *(long*)&y;
	i = 0x5f3759df - (i>>1);
	y = *(float*)&i;
	y = y * (1.5f - (halfx * y * y));
	return y;
}

//==============================================================================
//                                                                  V3_NORMALIZE
//==============================================================================
void v3_normalize(float v3_in[3]){
    // Vector 3 normalization
    float norm = invSqrt(v3_in[0] * v3_in[0] + v3_in[1] * v3_in[1] + v3_in[2] * v3_in[2]);
    
    v3_in[0] = v3_in[0]*norm;
    v3_in[1] = v3_in[1]*norm;
    v3_in[2] = v3_in[2]*norm;
}
 
//==============================================================================
//                                                                  V4_NORMALIZE
//==============================================================================
void v4_normalize(float v4_in[4]){
    // Vector 4 normalization
    float norm = invSqrt(v4_in[0] * v4_in[0] + v4_in[1] * v4_in[1] + v4_in[2] * v4_in[2] + v4_in[3] * v4_in[3]);
    
    v4_in[0] = v4_in[0]*norm;
    v4_in[1] = v4_in[1]*norm;
    v4_in[2] = v4_in[2]*norm;
    v4_in[3] = v4_in[3]*norm;
}

//==============================================================================
//                                                              RESET COUNTERS
//==============================================================================
void reset_counters() {

    uint8_t i;

    //Initialize counters
    g_mem.emg_counter[0] = g_mem.emg_counter[1] = 0;
    for(i = 0; i< 10; i++){
        g_mem.position_hist[i] = 0;
    }
    for(i = 0; i< 4; i++){
        g_mem.current_hist[i] = 0;
    }
    g_mem.rest_counter = 0;
    g_mem.wire_disp = 0;
    g_mem.total_time_on = 0;
    g_mem.total_time_rest = 0;
}

void BootLoaderInit(int BootLoaderStatus) {

 if (BootLoaderStatus == 1) {

	 // Shut down any task running
	 HAL_RCC_DeInit();
	 HAL_DeInit();
	 //SysTick -> CTRL = 0; // reset the Systick Timer
	 //SysTick -> LOAD = 0;
	 //SysTick -> VAL = 0;
	 __HAL_REMAPMEMORY_SYSTEMFLASH();
	 //__set_PRIMASK(1);
	 //__set_MSP(0x20001000); // Set the main stack pointer to its default value // QUI BISOGNA CONTROLLARE SE L'INDIRZZO TORNA

     __set_MSP(*((uint32_t*) 0x00000000));
     //__ASM volatile ("movs r3, #0\nldr r3, [r3, #0]\nMSR msp, r3\n" : : : "r3", "sp");

    ((void (*)(void)) *((uint32_t*) 0x00000005))();

	 while(1);
 }

 //#if defined(MCU_SERIES_F7)
     // arm-none-eabi-gcc 4.9.0 does not correctly inline this
     // MSP function, so we write it out explicitly here.
     //__set_MSP(*((uint32_t*) 0x1FF00000));
//     __ASM volatile ("movw r3, #0x0000\nmovt r3, #0x1FF0\nldr r3, [r3, #0]\nMSR msp, r3\n" : : : "r3", "sp");

//
// #else
//     __HAL_REMAPMEMORY_SYSTEMFLASH();

     // arm-none-eabi-gcc 4.9.0 does not correctly inline this
     // MSP function, so we write it out explicitly here.
     //__set_MSP(*((uint32_t*) 0x00000000));
 //    __ASM volatile ("movs r3, #0\nldr r3, [r3, #0]\nMSR msp, r3\n" : : : "r3", "sp");

 //    ((void (*)(void)) *((uint32_t*) 0x00000004))();
 //#endif

 //    while (1);
// }

}


/* [] END OF FILE */
